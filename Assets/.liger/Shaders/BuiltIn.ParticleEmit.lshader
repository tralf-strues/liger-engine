ComputeShader:
  ThreadGroupSize: [64, 1, 1]

  Use:
    - Include: BuiltIn.Random.lsdecl
    - Include: BuiltIn.ParticleData.lsdecl

  Input:
    - Name: EmitterData
      Type: uniform-buffer
      Contents: | #glsl
        ParticleSystem emitter;

    - Name: Particles
      Type: storage-buffer
      Layout: std430
      Access: writeonly
      Contents: | #glsl
        Particle particles[];

    - Name: FreeList
      Type: storage-buffer
      Layout: std430
      Access: readwrite
      Contents: | #glsl
        int32_t count;
        int32_t indices[];

    - Name: particles_to_spawn
      Type: uint32_t
      Modifier: push-constant

    - Name: time
      Type: float32_t
      Modifier: push-constant

  CodeSnippets:
    - Insert: auto-global
      Code: | #glsl
        void EmitParticle(out Particle particle, inout RandGenerator rand_gen, ParticleSystem emitter) {
          particle.position = f32vec3(0.0f);
          particle.velocity = mix(emitter.velocity_min, emitter.velocity_max, RandomVec3(rand_gen));
          particle.lifetime = emitter.lifetime;
        }

  Code: | #glsl
    uint32_t idx = gl_GlobalInvocationID.x;
    if (idx >= liger_in.particles_to_spawn) {
      return;
    }

    int32_t free_list_idx = atomicAdd(GetStorageBuffer(FreeList, liger_in.binding_free_list).count, -1) - 1;
    if (free_list_idx < 0) {
      // undo decrement, 'cause free list is empty
      atomicAdd(GetStorageBuffer(FreeList, liger_in.binding_free_list).count, 1);
      return;
    }

    int32_t        particle_idx = GetStorageBuffer(FreeList, liger_in.binding_free_list).indices[free_list_idx];
    ParticleSystem emitter      = GetUniformBuffer(EmitterData, liger_in.binding_emitter_data).emitter;
    RandGenerator  rand_gen     = CreateRandGenerator(particle_idx + uint32_t(liger_in.time * 1e3f));

    EmitParticle(GetStorageBuffer(Particles, liger_in.binding_particles).particles[particle_idx],
                 rand_gen,
                 emitter);