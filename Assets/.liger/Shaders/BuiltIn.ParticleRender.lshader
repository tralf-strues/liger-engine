Use:
  - Include: BuiltIn.ParticleData.lsdecl

InputAssemblyInfo:
  Topology: TriangleFan

RasterizationInfo:
  CullMode: None
  FrontFace: CounterClockwise
  PolygonMode: Fill

DepthStencilTestInfo:
  DepthTestEnable: true
  DepthWriteEnable: false
  DepthCompareOperation: Less

ColorBlendInfo:
  Enable: true

  SrcColorFactor: SrcAlpha
  DstColorFactor: One
  ColorOperation: Add

  SrcAlphaFactor: SrcAlpha
  DstAlphaFactor: DstAlpha
  AlphaOperation: Add

AttachmentInfo:
  RenderTargets: [B8G8R8A8_SRGB]
  DepthStencilTarget: D32_SFLOAT
  Samples: 1

Input:
  - Name: Particles
    Type: storage-buffer
    Layout: std430
    Access: readonly
    Contents: | #glsl
      Particle particles[];

VertexShader:
  Use:
    - Include: BuiltIn.Camera.lsdecl

  Input:
    - Name: vertex_idx
      Type: vertex-index

    - Name: instance_idx
      Type: instance-index

    - Name: transform
      Type: f32mat4
      Modifier: push-constant

  Output:
    - Name: ws_position
      Type: f32vec3
    - Name: color
      Type: f32vec4

  Code: | #glsl
    Camera   camera    = GetCamera(liger_in);
    Particle particle  = GetStorageBuffer(Particles, liger_in.binding_particles).particles[liger_in.instance_idx];

    uint32_t b               = 1U << liger_in.vertex_idx;
    f32vec2  uv              = f32vec2((0x3 & b) != 0U, (0x9 & b) != 0U);
    f32vec2  quad_vertex_pos = uv - f32vec2(0.5f);
    f32vec3  ws_center_pos   = (liger_in.transform * f32vec4(particle.position, 1.0f)).xyz;

    color       = particle.color;
    ws_position = ws_center_pos + CameraRightWS(camera) * quad_vertex_pos.x * particle.size
                                + CameraUpWS(camera)    * quad_vertex_pos.y * particle.size;
    gl_Position = camera.proj * camera.view * f32vec4(ws_position, 1.0f);

FragmentShader:
  Input:
    - Name: ws_position
      Type: f32vec3
    - Name: color
      Type: f32vec4

  Output:
    - Name: out_color
      Type: f32vec4

  Code: | #glsl
    out_color = liger_in.color;